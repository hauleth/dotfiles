#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).


z40=0000000000000000000000000000000000000000

IFS=' '
while read local_ref local_sha remote_ref remote_sha
do
  if [ "$local_sha" = "$z40" ]
  then
    # Handle delete
    :
  else
    if [ "$remote_sha" = "$z40" ]
    then
      master_branch="$(git config --get riff.wip.master)"
      # New branch, examine all commits
      if [ -z "$master_branch" ]
      then
        range="$local_sha"
      else
        range="$local_sha...$master_branch"
      fi
    else
      # Update to existing branch, examine new commits
      range="$remote_sha..$local_sha"
    fi

    # Check for WIP commit
    commit="$(git rev-list --count -i --grep '^WIP' "$range")"
    if [ "$commit" -ne "0" ]
    then
      echo "Found WIP $commit commit(s) in $local_ref, not pushing"
      exit 1
    fi
  fi
done

exit 0
